#!/usr/bin/env node
if (require('dotenv').config().error) {
  console.error('Unable to configure application, did you create a .env file?')
  return
}

const fs = require('fs')
const http = require('http')
const https = require('https')
const log = require('../logger')
const app = require('../app')
const m2 = require('../m2')

// Create both a http server (for the m2), and a https server for the browser clients
// that will likely be required to run https
standUpServer(http, normalizePort(process.env.HTTP_PORT || 80))
if (process.env.SSL_KEY) {
  standUpServer(https, normalizePort(process.env.HTTPS_PORT || 443), {
    key: fs.readFileSync(process.env.SSL_KEY),
    cert: fs.readFileSync(process.env.SSL_CERT)
  })
}

// Stand up a server using the module and port, and optionally the options
function standUpServer(module, port, options) {
  const server = module.createServer(options || {}, app)
  server.listen(port)
  server.on('upgrade', m2)
  server.on('error', (error) => handleError(error, port))
  server.on('listening', () => handleListening(server))
  return server
}

// Normalize a port into a number, string, or false
function normalizePort(val) {
  var port = parseInt(val, 10)
  if (isNaN(port)) {
    return val // named pipe
  }
  if (port >= 0) {
    return port // port number
  }
  return false
}

// Event listener for HTTP server "error" event
function handleError(error, port) {
  if (error.syscall !== 'listen') {
    throw error
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

// Event listener for HTTP server "listening" event
function handleListening(server) {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  log.info('Listening on ' + bind)
}
