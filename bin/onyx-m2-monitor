#!/usr/bin/env node
require('dotenv').config()
const fs = require('fs')
const bb = require('bit-buffer')
const dbc = require('../dbc/tesla_model3.dbc.json')

const ts = Date.now()
const rawLog = fs.createWriteStream(`./logs/m2-${ts}.log`)
const interpretedLog = fs.createWriteStream(`./logs/m2-${ts}-interpreted.log`)

const WebSocket = require('ws');

const hostname = process.env.M2_HOSTNAME
const pin = process.env.AUTHORIZATION
const ws = new WebSocket(`ws://${hostname}/m2?pin=${pin}`);
ws.on('open', () => {
  console.log(`Monitoring active`)
  ws.on('message', (msg) => {
    if (typeof(msg) === 'string') {
      return console.log(msg)
    }

    if (msg.length < 7) {
      console.log(`Invalid msg length (${msg.length}): ${msg.toString('hex')}`)
      return
    }

    const ts = msg.readUInt32LE()
    const id = msg.readUInt16LE(4)
    const len = msg.readUInt8(6)
    const data = msg.slice(7, 7 + len)

    const message = dbc.messages.find(m => m.id == id)

    const rawOutput= `${id} | 0x${id.toString(16)} @ ${ts} len ${len} | ${data.toString('hex')}`
    rawLog.write(`${rawOutput}\n`)
    console.log(rawOutput)

    if (message) {
      const buf = new bb.BitView(data)//Uint8Array.from(data.match(/.{1,2}/g).map(byte => parseInt(byte, 16))).buffer)
      var signals = []
      if (message.signals) {
        signals = message.signals.map(s => {
          var value
          try {
            value = buf.getBits(s.start, s.length, s.signed)
          } catch {
            value = '<err>'
          }
          value = s.offset + s.scale * value
          if (s.values && s.values[value]) {
            value = s.values[value]
          }
          return `  ${s.mnemonic}=${value}${s.units}`
        })
      }
      const output = `${message.id} | ${message.mnemonic} @ ${ts}\n${signals.join('\n')}`
      interpretedLog.write(`${output}\n`)
    }
  })
})
