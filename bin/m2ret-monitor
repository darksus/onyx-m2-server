#!/usr/bin/env node

const fs = require('fs')
const bb = require('bit-buffer')
const dbc = require('../dbc/tesla_model3.dbc.json')

const ts = Date.now()
const rawLog = fs.createWriteStream(`./logs/m2-${ts}.log`)
const interpretedLog = fs.createWriteStream(`./logs/m2-${ts}-interpreted.log`)

const WebSocket = require('ws');
const ws = new WebSocket('ws://onyx-m2.net/m2?pin=1379');
ws.on('open', () => {
  console.log(`Monitoring active`)
  ws.on('message', (msg) => {
    const parts = /(\d+) - (.+) [S|X] 0 (\d+) (.+)/.exec(msg)
    if (!parts) {
      return console.log(parts)
    }
    const ts = parseInt(parts[1])
    const id = parseInt(parts[2], 16)
    const len = parseInt(parts[3])
    const data = parts[4].replace(/\b\w\b/g, '0$&')

    const message = dbc.messages.find(m => m.id == id)

    const rawOutput= `${id} | 0x${id.toString(16)} @ ${ts} len ${len} | ${data}`
    rawLog.write(`${rawOutput}\n`)
    console.log(rawOutput)

    if (message) {
      const buf = new bb.BitView(Uint8Array.from(data.match(/.{1,2}/g).map(byte => parseInt(byte, 16))).buffer)
      const signals = message.signals.map(s => {
        var value
        try {
          value = buf.getBits(s.start, s.length, s.signed)
        } catch {
          value = '<err>'
        }
        value = s.offset + s.scale * value
        if (s.values && s.values[value]) {
          value = s.values[value]
        }
        return `  ${s.mnemonic}=${value}${s.units}`
      })
      const output = `${message.id} | ${message.mnemonic} @ ${ts}\n${signals.join('\n')}`
      interpretedLog.write(`${output}\n`)
      console.log(output)
    }
  })
})
